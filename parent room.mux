/*
################################################################################
### Global Room Parent #########################################################

https://github.com/lcanady/CrescentMoonMux

Formatted for Muxify: http://muxify.musoapbox.net/editor.html

Usage
    @parent <target room dbref>=<parent room dbref>

And in your .config file add the following line to automatically assign your
room parent to any new rooms created:

    room_parent <parent room dbref>

This is the parent room for Crescent Moon Mux. It's set through the .config file
as parent_room and should be automatically set when new rooms are created.

Requirements:
    header(<text>):         Game's pretty header function.
    idletime(<player>):     Checks a player's idle time.
    shortdesc(<player>):    Display a player's &short-desc attribute
    issecondary(<exit>):    Checks for a secondary exit attribute
    istertiary(<exit>):     Checks for tertiary exit attritbute

--------------------------------------------------------------------------------
--- Setup ----------------------------------------------------------------------
*/

@dig Global Room Parent <GRP>
@fo me=&d.grp=[search( name=Global Room Parent <GRP> )]
@set [v( d.grp )]=safe floating halt

/*
--------------------------------------------------------------------------------
--- configuration --------------------------------------------------------------

These are the settings to change the basic apperance of your Global Room Parent

*/

// .header related config settings for @conformat & @exitformat

&config.color     [v( d.grp )]= r
&config.hcolor    [v( d.grp )]= hr
&config.text      [v( d.grp )]= h
&config.filler    [v( d.grp )]= -
&config.lsep      [v( d.grp )]= <<
&config.rsep      [v( d.grp )]= >>

// Color configuration for exits with &secondary or &tertiary attributes

&config.secondary [v( d.grp )] = c
&config.tertiary  [v( d.grp )] = m

/*
--------------------------------------------------------------------------------
--- Name Format ----------------------------------------------------------------

Format the room name to show the game header.  If the looker is staff/wizard or
the owner of the room can see the dbref and flags list.

*/

@NameFormat [v( d.grp )]=
    header(
            [name( %! )]
            [if(
                or( match( %#, owner( %! ) ), orflags( %#, wWZ )),
                %([num( me )][flags( %! )]%)
            )]
     )


/*
--------------------------------------------------------------------------------
--- Content Format -------------------------------------------------------------

Room contents are split up into two parts, players and things.

*/

@ConFormat [v( d.grp )]=
   [if(
        [or(
            not( hasattr( %!, blind ) ),
            isstaff(%#)
        )],
        [u( .header, Characters [if( hasattr( %!, blind ), %[%ch%cxBLIND%cn%] )] )]
        [iter(
            filter( filter.players, lcon( %! )),
            %r[u( format.character, ## )]
        )]
        [if(
            words( filter( filter.objects, %0) ),
            strcat(
                %r,u( .header, Objects ),
                iter( filter( filter.objects, %0 ), %r[name( ## )])
            )
        )],%b
    )]

/*
--------------------------------------------------------------------------------
--- Exit Format ----------------------------------------------------------------

Formats the room's exit list.

Basic exit format. Don't worry about color, it's applied automatically:
    Exit Name <EN>;exit;en

Exits can have two optional attributes:
    &secondary <exit> = 1
    &tertiary <exit> = 1

*/

@ExitFormat [v( d.grp )]=

    [if(
        [or(
            not( hasattr( %!, blind ) ),
            isstaff(%#)
        )],
        [if(
            %0,
            [u( .header, Exits )]%r
        )]
        [columns(
            iter( %0,
                switch( 1,

## Find exits with the &secondary attribute

                    issecondary( ## ),
                        edit(
                            name( ## ),
                            <, ansi( v( config.secondary ), < ),
                            >, ansi( v( config.secondary ), > )
                        ),

## Find exits with the &tertiary attribute

                    istertiary( ## ),
                        edit(
                            name( ## ),
                            <, ansi( v( config.tertiary ), < ),
                            >, ansi( v( config.tertiary ), > )
                        ),
                    edit(
                        name( ## ),
                        <, ansi( v( config.hcolor ), < ),
                        >, ansi( v( config.hcolor ), > )
                    )
                ),,|
            )
            ,26,|
        )]
    )]
    [if(

## IC Area?

        not( hasflag( %!, IC )),
        footer( OOC AREA ),
        footer()
    )]


/*
--------------------------------------------------------------------------------
--- Filter Players -------------------------------------------------------------

Filters players in the room.

filter( filter.players, %0 )

0: contents list

*/

&filter.players [v( d.grp )]=
    and(
        hastype( %0, player ),
        not( hasflag( %0, dark )),
        hasflag(%0, connected )
    )


/*
--------------------------------------------------------------------------------
--- Filter Objects -------------------------------------------------------------

Filters objects in the room.

filter( filter.objects, %0 )

0: contents list

*/

&filter.objects [v( d.grp )]=
    and(
        hastype( %0, thing ),
        not( hasflag( %0, dark ))
    )

/*
--------------------------------------------------------------------------------
--- .header --------------------------------------------------------------------

Shows a formatted header for @conformat and @exitformat

0: Title

*/


&.header [v( d.grp )]=
    strcat(
        ansi(
            v( config.color ),
            [repeat( v( config.filler ), 3 )],
            n
        ),
        ljust(
            ansi(
                v( config.hcolor ), v( config.lsep ),
                v( config.text ), %b%0%b,
                v( config.hcolor), v( config.rsep ), n
            ),
            sub(78,3),
            ansi( v( config.color ), v( config.filler ), n )
        )
    )


/*
--------------------------------------------------------------------------------
--- Format Moniker -------------------------------------------------------------

Checks to see if a player has a moniker.  If looker is wizard or staff, it will
also show the dbref of a player.

0: target
1: looker

*/

&format.moniker [v( d.grp )]=
        [moniker( %0 )][if( orflags( %#, wWZ ), %(%0%) )]


/*
--------------------------------------------------------------------------------
--- Format Character -----------------------------------------------------------

Formats character information for display to the room.

0: target
1: looker

*/

&format.character [v( d.grp )]=
    cat(
        ljust( u( format.moniker, %0, %1 ) ,22),
        ljust( idletime(%0), 8 ),
        if(hasattr( %0, sex ), %([ucstr( mid( get(%0/sex),0 ,1 ))]%)),
        shortdesc(%0)
    )
